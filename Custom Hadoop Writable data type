
/* The data set is HTTP server log data from ftp://ita.ee.lbl.gov/traces/NASA_access_log_Jul95.gz 
wget ftp://ita.ee.lbl.gov/traces/NASA_access_log_Jul95.gz */

/* Description: 
The Writable interface consists of 2 methods: readFields() and write().The above defined LogWritable uses Writable
objects as its fields. readFields() is used to de-serialize the input data (DataInput object) and populate the 
fields of Writable object. It is also possible to use java primitive data types as the fields of the Writable type 
and to use the corresponding read methods of the DataInput object to read the values from the underlying stream, 
as shown in the following code snippet:

int responseSize = in.readInt();
String userIP = in.readUTF();

Inside the write() method, we write the fields of the Writable object to the underlying stream. If we are using 
Java Primitives, corresponding write methods of DataOutput object are used to write the values to the underlying 
stream.
out.writeInt(responseSize);
out.writeUTF(userIP);
*/

public class CustomDataType {
  public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException
  {
    Configuration conf=new Configuration();
		Job myjob = new Job(conf);
		.
		.
		.
		//defined LogWritable for MapOutput value and Output value types.
		myjob.setMapOutputKeyClass(Text.class);
		myjob.setMapOutputValueClass(LogWritable.class);
		myjob.setOutputKeyClass(Text.class);
		myjob.setOutputValueClass(LogWritable.class);
		
		myjob.setInputFormatClass(TextInputFormat.class);
		myjob.setOutputFormatClass(TextOutputFormat.class);
		.
		.
		.
	  System.exit(myjob.waitForCompletion(true)? 0:1);
  }
  
  //This LogWritable type can be used as a vaue type as it implements Writable interface.
	public static class LogWritable implements Writable
	{
		private Text userIP, timestamp, request;
		private IntWritable responseSize, status;
		public LogWritable()
		{
			this.userIP = new Text();
			this.timestamp = new Text();
			this.request = new Text();
			this.responseSize = new IntWritable();
			this.status = new IntWritable();
		}
		
		public void readFields(DataInput in) throws IOException
		{
			userIP.readFields(in);	
			timestamp.readFields(in);
		
			request.readFields(in);
			responseSize.readFields(in);
			status.readFields(in);
		}
	   public void write(DataOutput out) throws IOException
	   {
		   userIP.write(out);
		   timestamp.write(out);
		   request.write(out);
		   responseSize.write(out);
		   status.write(out);
	   }
	 /* TextOutputFormat uses the toString() method to serialize the key and value types. As the output value type is 
	 LogWritable, toString must be implemented to serialize the instances of custom Writable type.
	   public String toString()
	   {
		   String userip=userIP.toString();
		   String time=timestamp.toString();
		   String req=request.toString();
		   String response=responseSize.toString();
		   String stat=status.toString();
		   return userip+":"+time+":"+req+":"+response+":"+stat;
	   }
	}
	}
